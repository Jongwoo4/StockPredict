# -*- coding: utf-8 -*-
"""stock_LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f0ci3f9HWBaqkM_tp5D9BNYBkdkQoMnc
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline


df = pd.read_csv('/content/drive/My Drive/HistoricalData_1625044079644.csv')
df.head()

col = df.columns[1:]
df = df[col]
df = df.replace('[\$,]', '', regex=True).astype(float)
df = df['Close/Last']

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range = (0,1))
df.shape

df = scaler.fit_transform(np.array(df).reshape(-1,1))

training= int(len(df)*0.8)
test = len(df) - training

train_data, test_data = df[0:training,:],df[training:len(df),:]

def create_dataset(dataset, look_back=1):
    dataX, dataY= [], []
    for i in range(len(dataset)-look_back-1):
        a = dataset[i:(i+look_back),0]
        dataX.append(a)
        dataY.append(dataset[i+look_back,0])
    return np.array(dataX), np.array(dataY)

look_back = 30
trainX, trainY = create_dataset(train_data, look_back)
testX, testY = create_dataset(test_data, look_back)

trainX = trainX.reshape(trainX.shape[0],trainX.shape[1],1)
testX = testX.reshape(testX.shape[0],testX.shape[1],1)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LSTM

model = Sequential()
model.add(LSTM(50, return_sequences = True, input_shape = (30,1)))
model.add(LSTM(50, return_sequences = True))
model.add(LSTM(50))
model.add(Dense(1))

model.compile(loss='mean_squared_error', optimizer = 'adam')

model.summary()

model.fit(trainX,trainY,validation_data = (testX,testY), epochs = 100, batch_size=64,verbose=1)

y_pred = scaler.inverse_transform(model.predict(testX))
y_test = scaler.inverse_transform(testY.reshape(-1, 1))
y_pred[:5]

y_test[:5]

from sklearn.metrics import mean_squared_error

rmse_score = np.sqrt(mean_squared_error(y_test,y_pred))
print('Root Mean Squared Error(test) : ',rmse_score)